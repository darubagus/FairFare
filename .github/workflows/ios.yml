name: FairFare Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: SwiftLint
      uses: norio-nomura/action-swiftlint@3.2.1
      
    # deploy:
    # name: Deploy
    # needs: [build-and-test, lint]
    # runs-on: macos-latest
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # steps:
    # - uses: actions/checkout@v2
    
    # - name: Select Xcode
    #   run: sudo xcode-select -switch /Applications/Xcode_13.2.1.app
    
    # - name: Build App
    #   run: |
    #     xcodebuild clean archive -project FairFare.xcodeproj -scheme FairFare -archivePath $PWD/build/FairFare.xcarchive -allowProvisioningUpdates
    
    # - name: Export IPA
    #   run: |
    #     xcodebuild -exportArchive -archivePath $PWD/build/FairFare.xcarchive -exportOptionsPlist exportOptions.plist -exportPath $PWD/build
    
    # - name: Upload to TestFlight
    #   uses: apple-actions/upload-testflight-build@v1
    #   with: 
    #     app-path: $PWD/build/FairFare.ipa
    #     issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
    #     api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
    #     api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
